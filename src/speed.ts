'use strict'

import { round } from './common';
import lengthSI from './length/length.SI';

const SPEED_RATIOS: { [key: string]: number } = { // to the meter per second
    meterPerSecond: 1,
    meterPerMinute: 1 / 60,
    meterPerHour: 1 / 3600,
    centimeterPerSecond: 0.01,
    centimeterPerMinute: 0.01 / 60,
    centimeterPerHour: 0.01 / 3600,
    millimeterPerSecond: 0.001,
    millimeterPerMinute: 0.001 / 60,
    millimeterPerHour: 0.001 / 3600,
    footPerHour: 0.000084667,
    footPerMinute: 0.00508,
    footPerSecond: 0.3048,
    inchPerHour: 0.000007056,
    inchPerMinute: 0.000423333,
    inchPerSecond: 0.0254,
    furlongPerFortnight: 0.0001663095,
    kilometerPerHour: 0.277778,
    milePerHour: 0.44704,
    milePerMinute: 26.8224,
    milePerSecond: 1609.34,
    knot: 0.514444,
    knotAdmiralty: 0.514773,
    speedOfLightVacuum: 299792458,
};

const to = (value: number) => {
    let tos = {
        toMeterPerSecond: (decimalPlaces?: number) => round(value, decimalPlaces),
        toMeterPerMinute: (decimalPlaces?: number) => round(value / SPEED_RATIOS.meterPerMinute, decimalPlaces),
        toMeterPerHour: (decimalPlaces?: number) => round(value / SPEED_RATIOS.meterPerHour, decimalPlaces),
        toCentimeterPerSecond: (decimalPlaces?: number) => round(value / SPEED_RATIOS.centimeterPerSecond, decimalPlaces),
        toCentimeterPerMinute: (decimalPlaces?: number) => round(value / SPEED_RATIOS.centimeterPerMinute, decimalPlaces),
        toCentimeterPerHour: (decimalPlaces?: number) => round(value / SPEED_RATIOS.centimeterPerHour, decimalPlaces),
        toMillimeterPerSecond: (decimalPlaces?: number) => round(value / SPEED_RATIOS.millimeterPerSecond, decimalPlaces),
        toMillimeterPerMinute: (decimalPlaces?: number) => round(value / SPEED_RATIOS.millimeterPerMinute, decimalPlaces),
        toMillimeterPerHour: (decimalPlaces?: number) => round(value / SPEED_RATIOS.millimeterPerHour, decimalPlaces),
        toFootPerHour: (decimalPlaces?: number) => round(value / SPEED_RATIOS.footPerHour, decimalPlaces),
        toFootPerMinute: (decimalPlaces?: number) => round(value / SPEED_RATIOS.footPerMinute, decimalPlaces),
        toFootPerSecond: (decimalPlaces?: number) => round(value / SPEED_RATIOS.footPerSecond, decimalPlaces),
        toInchPerHour: (decimalPlaces?: number) => round(value / SPEED_RATIOS.inchPerHour, decimalPlaces),
        toInchPerMinute: (decimalPlaces?: number) => round(value / SPEED_RATIOS.inchPerMinute, decimalPlaces),
        toInchPerSecond: (decimalPlaces?: number) => round(value / SPEED_RATIOS.inchPerSecond, decimalPlaces),
        toFurlongPerFortnight: (decimalPlaces?: number) => round(value / SPEED_RATIOS.furlongPerFortnight, decimalPlaces),
        toKilometerPerHour: (decimalPlaces?: number) => round(value / SPEED_RATIOS.kilometerPerHour, decimalPlaces),
        toMilePerHour: (decimalPlaces?: number) => round(value / SPEED_RATIOS.milePerHour, decimalPlaces),
        toMilePerMinute: (decimalPlaces?: number) => round(value / SPEED_RATIOS.milePerMinute, decimalPlaces),
        toMilePerSecond: (decimalPlaces?: number) => round(value / SPEED_RATIOS.milePerSecond, decimalPlaces),
        toKnot: (decimalPlaces?: number) => round(value / SPEED_RATIOS.knot, decimalPlaces),
        toKnotAdmiralty: (decimalPlaces?: number) => round(value / SPEED_RATIOS.knotAdmiralty, decimalPlaces),
        toSpeedOfLightVacuum: (decimalPlaces?: number) => round(value / SPEED_RATIOS.speedOfLightVacuum, decimalPlaces),

        m_s: function (decimalPlaces?: number) { return this.toMeterPerSecond(decimalPlaces); },
        m_min: function (decimalPlaces?: number) { return this.toMeterPerMinute(decimalPlaces); },
        m_hr: function (decimalPlaces?: number) { return this.toMeterPerHour(decimalPlaces); },
        cm_s: function (decimalPlaces?: number) { return this.toCentimeterPerSecond(decimalPlaces); },
        cm_min: function (decimalPlaces?: number) { return this.toCentimeterPerMinute(decimalPlaces); },
        cm_hr: function (decimalPlaces?: number) { return this.toCentimeterPerHour(decimalPlaces); },
        mm_s: function (decimalPlaces?: number) { return this.toMillimeterPerSecond(decimalPlaces); },
        mm_min: function (decimalPlaces?: number) { return this.toMillimeterPerMinute(decimalPlaces); },
        mm_hr: function (decimalPlaces?: number) { return this.toMillimeterPerHour(decimalPlaces); },
        ft_hr: function (decimalPlaces?: number) { return this.toFootPerHour(decimalPlaces); },
        ft_min: function (decimalPlaces?: number) { return this.toFootPerMinute(decimalPlaces); },
        ft_s: function (decimalPlaces?: number) { return this.toFootPerSecond(decimalPlaces); },
        in_hr: function (decimalPlaces?: number) { return this.toInchPerHour(decimalPlaces); },
        in_min: function (decimalPlaces?: number) { return this.toInchPerMinute(decimalPlaces); },
        in_s: function (decimalPlaces?: number) { return this.toInchPerSecond(decimalPlaces); },
        fur_fort: function (decimalPlaces?: number) { return this.toFurlongPerFortnight(decimalPlaces); },
        km_hr: function (decimalPlaces?: number) { return this.toKilometerPerHour(decimalPlaces); },
        mi_hr: function (decimalPlaces?: number) { return this.toMilePerHour(decimalPlaces); },
        mi_min: function (decimalPlaces?: number) { return this.toMilePerMinute(decimalPlaces); },
        mi_s: function (decimalPlaces?: number) { return this.toMilePerSecond(decimalPlaces); },
        kn: function (decimalPlaces?: number) { return this.toKnot(decimalPlaces); },
        kn_adm: function (decimalPlaces?: number) { return this.toKnotAdmiralty(decimalPlaces); },
        c: function (decimalPlaces?: number) { return this.toSpeedOfLightVacuum(decimalPlaces); },
    }
    return tos;
}

export default {
    meterPerSecond: (value: number) => to(value),
    meterPerMinute: (value: number) => to(value * SPEED_RATIOS.meterPerMinute),
    meterPerHour: (value: number) => to(value * SPEED_RATIOS.meterPerHour),
    centimeterPerSecond: (value: number) => to(value * SPEED_RATIOS.centimeterPerSecond),
    centimeterPerMinute: (value: number) => to(value * SPEED_RATIOS.centimeterPerMinute),
    centimeterPerHour: (value: number) => to(value * SPEED_RATIOS.centimeterPerHour),
    millimeterPerSecond: (value: number) => to(value * SPEED_RATIOS.millimeterPerSecond),
    millimeterPerMinute: (value: number) => to(value * SPEED_RATIOS.millimeterPerMinute),
    millimeterPerHour: (value: number) => to(value * SPEED_RATIOS.millimeterPerHour),
    footPerHour: (value: number) => to(value * SPEED_RATIOS.footPerHour),
    footPerMinute: (value: number) => to(value * SPEED_RATIOS.footPerMinute),
    footPerSecond: (value: number) => to(value * SPEED_RATIOS.footPerSecond),
    inchPerHour: (value: number) => to(value * SPEED_RATIOS.inchPerHour),
    inchPerMinute: (value: number) => to(value * SPEED_RATIOS.inchPerMinute),
    inchPerSecond: (value: number) => to(value * SPEED_RATIOS.inchPerSecond),
    furlongPerFortnight: (value: number) => to(value * SPEED_RATIOS.furlongPerFortnight),
    kilometerPerHour: (value: number) => to(value * SPEED_RATIOS.kilometerPerHour),
    milePerHour: (value: number) => to(value * SPEED_RATIOS.milePerHour),
    milePerMinute: (value: number) => to(value * SPEED_RATIOS.milePerMinute),
    milePerSecond: (value: number) => to(value * SPEED_RATIOS.milePerSecond),
    knot: (value: number) => to(value * SPEED_RATIOS.knot),
    knotAdmiralty: (value: number) => to(value * SPEED_RATIOS.knotAdmiralty),
    speedOfLightVacuum: (value: number) => to(value * SPEED_RATIOS.speedOfLightVacuum),

    m_s: function (value: number) { return this.meterPerSecond(value); },
    m_min: function (value: number) { return this.meterPerMinute(value); },
    m_hr: function (value: number) { return this.meterPerHour(value); },
    cm_s: function (value: number) { return this.centimeterPerSecond(value); },
    cm_min: function (value: number) { return this.centimeterPerMinute(value); },
    cm_hr: function (value: number) { return this.centimeterPerHour(value); },
    mm_s: function (value: number) { return this.millimeterPerSecond(value); },
    mm_min: function (value: number) { return this.millimeterPerMinute(value); },
    mm_hr: function (value: number) { return this.millimeterPerHour(value); },
    ft_hr: function (value: number) { return this.footPerHour(value); },
    ft_min: function (value: number) { return this.footPerMinute(value); },
    ft_s: function (value: number) { return this.footPerSecond(value); },
    in_hr: function (value: number) { return this.inchPerHour(value); },
    in_min: function (value: number) { return this.inchPerMinute(value); },
    in_s: function (value: number) { return this.inchPerSecond(value); },
    fur_fort: function (value: number) { return this.furlongPerFortnight(value); },
    km_hr: function (value: number) { return this.kilometerPerHour(value); },
    mi_hr: function (value: number) { return this.milePerHour(value); },
    mi_min: function (value: number) { return this.milePerMinute(value); },
    mi_s: function (value: number) { return this.milePerSecond(value); },
    kn: function (value: number) { return this.knot(value); },
    kn_adm: function (value: number) { return this.knotAdmiralty(value); },
    c: function (value: number) { return this.speedOfLightVacuum(value); },
}